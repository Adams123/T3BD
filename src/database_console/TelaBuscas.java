/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package database_console;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.lang.Integer.parseInt;
import java.sql.*;
import java.util.Vector;
import javax.swing.*;

/**
 *
 * @author Adams
 */
public class TelaBuscas extends javax.swing.JFrame {

    public ResultSet result;
    public String usuario;
    int tamx=500, tamy=100;
    
    String host = "jdbc:postgresql://localhost:5432/postgres";  //endereco da conexao do banco de dados
    String user = "postgres";                                   //usuario
    String pass = "postgres";                                   //senha
    /**
     * Creates new form telaCliente
     *
     * @param usuario
     */
    public TelaBuscas(String usuario) {
        this.usuario = usuario;
        initComponents();
    }

    private void popAviso(String in) {
        JFrame frame = new JFrame();
        JOptionPane.showMessageDialog(frame, in);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        postgresPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("postgresPU").createEntityManager();
        grupoBuscas1 = new javax.swing.ButtonGroup();
        grupoExibicao1 = new javax.swing.ButtonGroup();
        grupoBuscas2 = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        botaoBuscas1 = new javax.swing.JButton();
        atorBotao = new javax.swing.JRadioButton();
        diretorBotao = new javax.swing.JRadioButton();
        roteiristaBotao = new javax.swing.JRadioButton();
        campoBuscas1 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        campoBuscas2 = new javax.swing.JTextField();
        botaoBuscas2 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        campoBuscas3 = new javax.swing.JTextField();
        botaoBuscas3 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        botaoVoltar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        boxCat1 = new javax.swing.JComboBox();
        botaoBuscas4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        oscarBotao = new javax.swing.JRadioButton();
        globoBotao = new javax.swing.JRadioButton();
        campoBuscas5 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        botaoBuscas5 = new javax.swing.JButton();
        boxCat2 = new javax.swing.JComboBox();
        boxCat3 = new javax.swing.JComboBox();
        boxCat4 = new javax.swing.JComboBox();
        boxCat5 = new javax.swing.JComboBox();
        botaoCat1 = new javax.swing.JRadioButton();
        botaoCat3 = new javax.swing.JRadioButton();
        botaoCat4 = new javax.swing.JRadioButton();
        botaoCat5 = new javax.swing.JRadioButton();
        botaoCat2 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Base de Dados");
        setAlwaysOnTop(true);

        botaoBuscas1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoBuscas1.setText("Buscar");
        botaoBuscas1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscas1ActionPerformed(evt);
            }
        });

        grupoBuscas2.add(atorBotao);
        atorBotao.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        atorBotao.setText("Buscar informações de Ator");
        atorBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atorBotaoActionPerformed(evt);
            }
        });

        grupoBuscas2.add(diretorBotao);
        diretorBotao.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        diretorBotao.setText("Buscar informações de Diretor");

        grupoBuscas2.add(roteiristaBotao);
        roteiristaBotao.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        roteiristaBotao.setText("Buscar informações de Roteirista");

        campoBuscas1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoBuscas1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoBuscas1ActionPerformed(evt);
            }
        });

        campoBuscas2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        botaoBuscas2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoBuscas2.setText("Buscar");
        botaoBuscas2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscas2ActionPerformed(evt);
            }
        });

        campoBuscas3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        botaoBuscas3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoBuscas3.setText("Buscar");
        botaoBuscas3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscas3ActionPerformed(evt);
            }
        });

        botaoVoltar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoVoltar.setText("Voltar");
        botaoVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVoltarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Buscar filme:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Buscar Gênero de Filme");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Buscar por categoria");

        boxCat1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boxCat1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Melhor Filme", "Melhor Filme de Animacao", "Melhor Filme de lingua estrangeira", "Melhor Trila Sonora", "Melhor Filme Dramatico", "Melhor Filme de Comedia ou Musical", " " }));
        boxCat1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxCat1ActionPerformed(evt);
            }
        });

        botaoBuscas4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoBuscas4.setText("Buscar");
        botaoBuscas4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscas4ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Buscar por edição");

        buttonGroup1.add(oscarBotao);
        oscarBotao.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        oscarBotao.setText("Oscar");

        buttonGroup1.add(globoBotao);
        globoBotao.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        globoBotao.setText("Globo de Ouro");

        campoBuscas5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel5.setText("Ano:");

        botaoBuscas5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botaoBuscas5.setText("Buscar");
        botaoBuscas5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscas5ActionPerformed(evt);
            }
        });

        boxCat2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boxCat2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Melhor ator", "Melhor atriz", "Melhor ator coadjuvante", "Melhor atriz coadjuvante", "Melhor ator de filme dramatico", "Melhor atriz de filme dramatico", "Melhor ator de filme de comedia ou musical", "Melhor atriz de filme de comedia ou musical" }));

        boxCat3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boxCat3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Melhor cancao original" }));

        boxCat4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boxCat4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Melhor diretor" }));

        boxCat5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boxCat5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Melhor roteiro original", "Melhor roteiro adaptado" }));

        buttonGroup2.add(botaoCat1);
        botaoCat1.setText("Filme");

        buttonGroup2.add(botaoCat3);
        botaoCat3.setText("Música");

        buttonGroup2.add(botaoCat4);
        botaoCat4.setText("Diretor");

        buttonGroup2.add(botaoCat5);
        botaoCat5.setText("Roteiro");

        buttonGroup2.add(botaoCat2);
        botaoCat2.setText("Ator");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(botaoVoltar)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botaoCat1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(boxCat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botaoCat3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(boxCat3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botaoCat4)
                            .addComponent(botaoCat2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(boxCat4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxCat2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roteiristaBotao)
                            .addComponent(atorBotao)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(98, 98, 98)
                                .addComponent(campoBuscas1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(diretorBotao)
                                .addGap(28, 28, 28)
                                .addComponent(campoBuscas3, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(161, 161, 161)
                                .addComponent(campoBuscas2, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botaoCat5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(boxCat5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botaoBuscas4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(botaoBuscas3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(botaoBuscas2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(botaoBuscas1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(globoBotao)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(oscarBotao)
                                .addGap(61, 61, 61)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(campoBuscas5, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoBuscas5)
                        .addGap(49, 49, 49))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoBuscas1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(campoBuscas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoBuscas2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(botaoBuscas2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(atorBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diretorBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoBuscas3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoBuscas3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roteiristaBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxCat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxCat2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoCat1)
                    .addComponent(botaoCat2))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxCat3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxCat4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoCat3)
                    .addComponent(botaoCat4))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxCat5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoBuscas4)
                    .addComponent(botaoCat5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(botaoBuscas5)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(oscarBotao)
                            .addComponent(jLabel5)
                            .addComponent(campoBuscas5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(globoBotao)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoVoltar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoBuscas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscas1ActionPerformed
        String input, busca, ordem;
        busca = campoBuscas1.getText().toUpperCase();
        if (campoBuscas1.getText().isEmpty()) {
            popAviso("Por favor, digite o gênero.");
            return;
        }
        input = "SELECT F.TITULO, F.ANO, PESSOA_DIRETOR.NOME \"DIRETOR\", "
                + "PESSOA_ROTEIRISTA.NOME \"ROTEIRISTA\", "
                + "F.NUMPREMIOS FROM FILME F "
                + "JOIN PESSOA PESSOA_DIRETOR "
                + "ON F.DIRETOR = PESSOA_DIRETOR.IDPESSOA "
                + "JOIN PESSOA PESSOA_ROTEIRISTA "
                + "ON F.ROTEIRISTA = PESSOA_ROTEIRISTA.IDPESSOA "
                + "WHERE "
                + "UPPER(F.GENERO) = UPPER('" + busca + "') ORDER BY - F.NUMPREMIOS";
        String input2 = "SELECT F.TITULO, AVG(C.ESTRELAS) \"MEDIA DE NOTAS\" "
                + "FROM CLASSIFICA C RIGHT JOIN FILME F ON F.IDFILME = C.FILME "
                + "WHERE UPPER(F.GENERO) = UPPER('" + busca + "') "
                + "GROUP BY F.TITULO ORDER BY - AVG(C.ESTRELAS)";
        Vector columnNames = new Vector();
        Vector data = new Vector();
        Vector columnNames2 = new Vector();
        Vector data2 = new Vector();
        try {
            //realizar o carregamento do JDBC
            Class.forName("org.postgresql.Driver");
            //construindo a conexão com o SGBD PostgreSQL
            Connection conexao = DriverManager.getConnection(host, user, pass);

            PreparedStatement instrucao = conexao.prepareStatement(input);
            PreparedStatement instrucao2 = conexao.prepareStatement(input2);
            //construção da classe PreparedStatement para passagem de parâmetros

            ResultSet result = instrucao.executeQuery(); //recebe os resultados da query
            ResultSet result2 = instrucao2.executeQuery(); //recebe os resultados da query
            ResultSetMetaData resultados = result.getMetaData(); //cria metadados dos resultados
            ResultSetMetaData resultados2 = result2.getMetaData(); //cria metadados dos resultados
            int colunas = resultados.getColumnCount(); //pega quantidade de colunas
            int colunas2 = resultados2.getColumnCount(); //pega quantidade de colunas
            int count = 0;
            while (result.next()) {
                count++;
            }
            if (count == 0) {
                popAviso("Nenhum resultado encontrado.");
                return;
            }
            for (int i = 1; i <= colunas; i++) {
                columnNames.addElement(resultados.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            for (int i = 1; i <= colunas2; i++) {
                columnNames2.addElement(resultados2.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            result = instrucao.executeQuery();//reposiciona ponteiro de leitura dos resultados
            while (result.next()) {
                Vector row = new Vector(colunas);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas; i++) {
                    row.addElement(result.getObject(i));
                }
                data.addElement(row); //adiciona no vetor de dados as tuplas
            }
            while (result2.next()) {
                Vector row = new Vector(colunas2);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas2; i++) {
                    row.addElement(result2.getObject(i));
                }
                data2.addElement(row); //adiciona no vetor de dados as tuplas
            }
            result.close();       //encerra a consulta
            result2.close();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "ERRO CLASSE: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "ERRO SQL: " + e.getMessage());
        }
        //cria tabela e painel novo para exibir as consultas
        JTable table = new JTable(data, columnNames);
        JTable table2 = new JTable(data2, columnNames2);
        table.setPreferredScrollableViewportSize(new Dimension(tamx, tamy));
        table2.setPreferredScrollableViewportSize(new Dimension(tamx, tamy));
        JScrollPane scrollPane = new JScrollPane(table);
        JScrollPane scrollPane2 = new JScrollPane(table2);
        JPanel panel = new JPanel();
        panel.add(scrollPane);
        panel.add(scrollPane2);
        JButton botaoVoltar = new JButton("Voltar");
        botaoVoltar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFrame janela = new TelaBuscas(usuario);
                janela.setVisible(true);
                dispose();
            }
        });

        int tamaninho = scrollPane.getHeight() + scrollPane2.getHeight();
        botaoVoltar.setLocation(250, tamaninho + 30);
        panel.add(botaoVoltar);
        panel.setSize(250, 1024);
        this.setContentPane(panel);
        this.pack();
        this.setVisible(true);
    }//GEN-LAST:event_botaoBuscas1ActionPerformed

    private void atorBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atorBotaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atorBotaoActionPerformed

    private void campoBuscas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoBuscas1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoBuscas1ActionPerformed

    private void botaoBuscas2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscas2ActionPerformed
        String input, busca;
        busca = campoBuscas2.getText().toUpperCase();
        if (campoBuscas2.getText().isEmpty()) {
            popAviso("Por favor, digite o filme.");
            return;
        }
        input = "SELECT F.TITULO, F.ANO, F.GENERO, PD.NOME \"DIRETOR\", PR.NOME \"ROTEIRISTA\", F.PAIS, F.ROTORIGINAL \"ROTEIRO ORIGINAL?\" "
                + "FROM FILME F JOIN PESSOA PD ON F.DIRETOR = PD.IDPESSOA "
                + "JOIN PESSOA PR ON F.ROTEIRISTA = PR.IDPESSOA "
                + "WHERE UPPER(F.TITULO) = UPPER('"
                + busca
                + "');";
        String input2 = "SELECT P.NOME \"ATOR\", A.PERSONAGEM "
                + "FROM ATUACAO A JOIN PESSOA P ON P.IDPESSOA = A.ATOR "
                + "JOIN FILME F ON F.IDFILME = A.FILME "
                + "WHERE UPPER(F.TITULO) = UPPER('"
                + busca
                + "');";
        String input3 = "SELECT I.CAT_FILME \"PREMIO\", E.PREMIO \"EVENTO\", E.ANO FROM FILME F "
                + "JOIN INDICACAO_FILME I ON F.IDFILME = I.FILME "
                + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                + "WHERE UPPER(F.TITULO) = UPPER('"
                + busca
                + "') AND I.GANHOU = 'S' UNION ALL SELECT I.CAT_DIR, E.PREMIO, E.ANO "
                + "FROM FILME F JOIN INDICACAO_DIRETOR I ON F.IDFILME = I.FILME"
                + " JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                + "WHERE UPPER(F.TITULO) = UPPER('"
                + busca
                + "') AND I.GANHOU = 'S' UNION ALL "
                + "SELECT I.CAT_ATOR, E.PREMIO, E.ANO "
                + "FROM FILME F JOIN INDICACAO_ATOR I ON F.IDFILME = I.FILME "
                + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                + "WHERE UPPER(F.TITULO) = UPPER('"
                + busca
                + "') AND I.GANHOU = 'S' UNION ALL "
                + "SELECT I.CAT_MUSICA, E.PREMIO, E.ANO "
                + "FROM FILME F JOIN INDICACAO_MUSICA I ON F.IDFILME = I.FILME "
                + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                + "WHERE UPPER(F.TITULO) = UPPER('"
                + busca
                + "') AND I.GANHOU = 'S' UNION ALL "
                + "SELECT I.CAT_ROT, E.PREMIO, E.ANO "
                + "FROM FILME F JOIN INDICACAO_ROTEIRO I ON F.IDFILME = I.FILME "
                + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                + "WHERE UPPER(F.TITULO) = UPPER('"
                + busca
                + "') AND I.GANHOU = 'S';";
        Vector columnNames = new Vector();
        Vector data = new Vector();
        Vector columnNames2 = new Vector();
        Vector data2 = new Vector();
        Vector columnNames3 = new Vector();
        Vector data3 = new Vector();

        try {
            //realizar o carregamento do JDBC
            Class.forName("org.postgresql.Driver");
            //construindo a conexão com o SGBD PostgreSQL
            Connection conexao = DriverManager.getConnection(host, user, pass);

            PreparedStatement instrucao = conexao.prepareStatement(input);
            PreparedStatement instrucao2 = conexao.prepareStatement(input2);
            PreparedStatement instrucao3 = conexao.prepareStatement(input3);
            //construção da classe PreparedStatement para passagem de parâmetros

            ResultSet result = instrucao.executeQuery(); //recebe os resultados da query
            ResultSet result2 = instrucao2.executeQuery(); //recebe os resultados da query
            ResultSet result3 = instrucao3.executeQuery(); //recebe os resultados da query
            ResultSetMetaData resultados = result.getMetaData(); //cria metadados dos resultados
            ResultSetMetaData resultados2 = result2.getMetaData(); //cria metadados dos resultados
            ResultSetMetaData resultados3 = result3.getMetaData(); //cria metadados dos resultados
            int colunas = resultados.getColumnCount(); //pega quantidade de colunas
            int colunas2 = resultados2.getColumnCount(); //pega quantidade de colunas
            int colunas3 = resultados3.getColumnCount(); //pega quantidade de colunas
            int count = 0, count2 = 0, count3 = 0;
            while (result.next()) {
                count++;
            }
            if (count == 0) {
                popAviso("Nenhum resultado encontrado.");
                return;
            }
            for (int i = 1; i <= colunas; i++) {
                columnNames.addElement(resultados.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            for (int i = 1; i <= colunas2; i++) {
                columnNames2.addElement(resultados2.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            for (int i = 1; i <= colunas3; i++) {
                columnNames3.addElement(resultados3.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            result = instrucao.executeQuery();
            while (result.next()) {
                Vector row = new Vector(colunas);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas; i++) {
                    row.addElement(result.getObject(i));
                }
                data.addElement(row); //adiciona no vetor de dados as tuplas
            }
            while (result2.next()) {
                Vector row = new Vector(colunas2);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas2; i++) {
                    row.addElement(result2.getObject(i));
                }
                data2.addElement(row); //adiciona no vetor de dados as tuplas
            }
            while (result3.next()) {
                Vector row = new Vector(colunas3);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas3; i++) {
                    row.addElement(result3.getObject(i));
                }
                data3.addElement(row); //adiciona no vetor de dados as tuplas
            }
            result.close();       //encerra a consulta
            result2.close();
            result3.close();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "ERRO CLASSE: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "ERRO SQL: " + e.getMessage());
        }
        //cria tabela e painel novo para exibir as consultas
        JTable table = new JTable(data, columnNames);
        JTable table2 = new JTable(data2, columnNames2);
        JTable table3 = new JTable(data3, columnNames3);
        table.setPreferredScrollableViewportSize(new Dimension(tamx, tamy));
        table2.setPreferredScrollableViewportSize(new Dimension(250, tamy));
        table3.setPreferredScrollableViewportSize(new Dimension(450, tamy));
        JScrollPane scrollPane = new JScrollPane(table);
        JScrollPane scrollPane2 = new JScrollPane(table2);
        JScrollPane scrollPane3 = new JScrollPane(table3);
        JPanel panel = new JPanel();
        panel.add(scrollPane);
        panel.add(scrollPane2);
        panel.add(scrollPane3);
        JButton botaoVoltar = new JButton("Voltar");
        botaoVoltar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFrame janela = new TelaBuscas(usuario);
                janela.setVisible(true);
                dispose();
            }
        });

        int tamaninho = scrollPane.getHeight() + scrollPane2.getHeight();
        botaoVoltar.setLocation(250, tamaninho + 30);
        panel.add(botaoVoltar);
        this.setContentPane(panel);
        this.pack();
        this.setVisible(true);
    }//GEN-LAST:event_botaoBuscas2ActionPerformed

    private void botaoBuscas3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscas3ActionPerformed
        String input1 = null, input2 = null, input3 = null, busca;
        int flag = -1;
        if (campoBuscas3.getText().isEmpty()) {
            popAviso("Por favor, digite alguma coisa.");
            return;
        } else {
            busca = campoBuscas3.getText().toUpperCase();
        }
        if (atorBotao.isSelected()) {
            flag = 1;
        } else if (diretorBotao.isSelected()) {
            flag = 2;
        } else if (roteiristaBotao.isSelected()) {
            flag = 3;
        } else {
            popAviso("Por favor, marque alguma das opções ao lado.");
            return;
        }

        switch (flag) {
            case 1:
                input1 = "SELECT P.SEXO, P.PAIS, P.NASCIMENTO "
                        + "FROM PESSOA P WHERE UPPER(P.NOME) = UPPER('"
                        + busca
                        + "')";
                input2 = "SELECT F.TITULO \"FILME\", F.ANO FROM ATUACAO A "
                        + "JOIN FILME F ON F.IDFILME = A.FILME "
                        + "JOIN PESSOA P ON P.IDPESSOA = A.ATOR "
                        + "WHERE UPPER(P.NOME) = UPPER('"
                        + busca
                        + "')";
                input3 = "SELECT I.CAT_ATOR \"PREMIO\", F.TITULO \"FILME\",E.PREMIO \"EVENTO\", E.ANO "
                        + "FROM INDICACAO_ATOR I "
                        + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                        + "JOIN PESSOA P ON P.IDPESSOA = I.ATOR "
                        + "JOIN FILME F ON F.IDFILME = I.FILME "
                        + "WHERE UPPER(P.NOME) = UPPER('"
                        + busca
                        + "') "
                        + "AND I.GANHOU = 'S' ORDER BY - E.ANO";
                break;
            case 2:
                input1 = "SELECT P.SEXO, P.PAIS, P.NASCIMENTO "
                        + "FROM PESSOA P "
                        + "WHERE UPPER(P.NOME) = UPPER('"
                        + busca
                        + "')";
                input2 = "SELECT F.TITULO \"FILME\", F.ANO "
                        + "FROM FILME F JOIN PESSOA P ON P.IDPESSOA = F.DIRETOR "
                        + "WHERE UPPER(P.NOME) = UPPER('"
                        + busca
                        + "')";
                input3 = "SELECT I.CAT_DIR \"PREMIO\", F.TITULO \"FILME\", E.PREMIO \"EVENTO\", "
                        + "E.ANO FROM INDICACAO_DIRETOR I "
                        + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                        + "JOIN FILME F ON F.IDFILME = I.FILME "
                        + "JOIN PESSOA P ON P.IDPESSOA = F.DIRETOR "
                        + "WHERE UPPER(P.NOME) = UPPER('"
                        + busca
                        + "') "
                        + "AND I.GANHOU = 'S' ORDER BY - E.ANO;";
                break;
            case 3:
                input1 = "SELECT P.SEXO, P.PAIS, P.NASCIMENTO "
                        + "FROM PESSOA P "
                        + "WHERE UPPER(P.NOME) = UPPER('"
                        + busca
                        + "')";
                input2 = "SELECT F.TITULO \"FILME\", F.ANO "
                        + "FROM FILME F JOIN PESSOA P ON P.IDPESSOA = F.ROTEIRISTA "
                        + "WHERE UPPER(P.NOME) = UPPER('"
                        + busca
                        + "')";
                input3 = "SELECT I.CAT_ROT \"PREMIO\", F.TITULO \"FILME\", E.PREMIO \"EVENTO\", E.ANO "
                        + "FROM INDICACAO_ROTEIRO I "
                        + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                        + "JOIN FILME F ON F.IDFILME = I.FILME "
                        + "JOIN PESSOA P ON P.IDPESSOA = F.ROTEIRISTA "
                        + "WHERE UPPER(P.NOME) = UPPER('"
                        + busca
                        + "') AND I.GANHOU = 'S' ORDER BY - E.ANO;";
                break;
            case -1:
                popAviso("Por favor selecione uma opção.");
                break;
        }

        Vector columnNames = new Vector();
        Vector columnNames2 = new Vector();
        Vector columnNames3 = new Vector();
        Vector data = new Vector();
        Vector data2 = new Vector();
        Vector data3 = new Vector();
        try {
            //realizar o carregamento do JDBC
            Class.forName("org.postgresql.Driver");
            //construindo a conexão com o SGBD PostgreSQL
            Connection conexao = DriverManager.getConnection(host, user, pass);

            PreparedStatement instrucao = conexao.prepareStatement(input1);
            PreparedStatement instrucao2 = conexao.prepareStatement(input2);
            PreparedStatement instrucao3 = conexao.prepareStatement(input3);

            ResultSet result = instrucao.executeQuery(); //recebe os resultados da query
            ResultSet result2 = instrucao2.executeQuery(); //recebe os resultados da query
            ResultSet result3 = instrucao3.executeQuery(); //recebe os resultados da query
            ResultSetMetaData resultados = result.getMetaData(); //cria metadados dos resultados
            ResultSetMetaData resultados2 = result2.getMetaData(); //cria metadados dos resultados
            ResultSetMetaData resultados3 = result3.getMetaData(); //cria metadados dos resultados
            int colunas = resultados.getColumnCount(); //pega quantidade de colunas
            int colunas2 = resultados2.getColumnCount(); //pega quantidade de colunas
            int colunas3 = resultados3.getColumnCount(); //pega quantidade de colunas

            int count = 0;
            while (result.next()) {
                count++;
            }
            if (count == 0) {
                popAviso("Nenhum resultado encontrado.");
                return;
            }

            for (int i = 1; i <= colunas; i++) {
                columnNames.addElement(resultados.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            for (int i = 1; i <= colunas2; i++) {
                columnNames2.addElement(resultados2.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            for (int i = 1; i <= colunas3; i++) {
                columnNames3.addElement(resultados3.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            result = instrucao.executeQuery();
            while (result.next()) {
                Vector row = new Vector(colunas);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas; i++) {
                    row.addElement(result.getObject(i));
                }
                data.addElement(row); //adiciona no vetor de dados as tuplas
            }
            while (result2.next()) {
                Vector row = new Vector(colunas2);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas2; i++) {
                    row.addElement(result2.getObject(i));
                }
                data2.addElement(row); //adiciona no vetor de dados as tuplas
            }
            while (result3.next()) {
                Vector row = new Vector(colunas3);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas3; i++) {
                    row.addElement(result3.getObject(i));
                }
                data3.addElement(row); //adiciona no vetor de dados as tuplas
            }
            result.close();       //encerra a consulta
            result2.close();       //encerra a consulta
            result3.close();       //encerra a consulta
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "ERRO CLASSE: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "ERRO SQL: " + e.getMessage());
        }
        //cria tabela e painel novo para exibir as consultas
        JTable table = new JTable(data, columnNames);
        JTable table2 = new JTable(data2, columnNames2);
        JTable table3 = new JTable(data3, columnNames3);
        table.setPreferredScrollableViewportSize(new Dimension(tamx/2, tamy));
        table2.setPreferredScrollableViewportSize(new Dimension(tamx/2, tamy));
        table3.setPreferredScrollableViewportSize(new Dimension(tamx, tamy));
        JScrollPane scrollPane = new JScrollPane(table);
        JScrollPane scrollPane2 = new JScrollPane(table2);
        JScrollPane scrollPane3 = new JScrollPane(table3);
        JPanel panel = new JPanel();
        panel.add(scrollPane);
        panel.add(scrollPane2);
        panel.add(scrollPane3);
        JButton botaoVoltar = new JButton("Voltar");
        botaoVoltar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFrame janela = new TelaBuscas(usuario);
                janela.setVisible(true);
                dispose();
            }
        });
        int tamaninho = scrollPane.getHeight();
        botaoVoltar.setLocation(250, tamaninho + 30);
        panel.add(botaoVoltar);
        this.setContentPane(panel);
        this.pack();
        this.setVisible(true);
    }//GEN-LAST:event_botaoBuscas3ActionPerformed

    private void botaoVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVoltarActionPerformed
        JFrame janela = new Selecao(usuario);
        janela.setVisible(true);
        dispose();
    }//GEN-LAST:event_botaoVoltarActionPerformed

    private void boxCat1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxCat1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxCat1ActionPerformed

    private void botaoBuscas4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscas4ActionPerformed
        String input = null, busca;
        int flag = -1;
        if (botaoCat1.isSelected()) {
            busca = boxCat1.getSelectedItem().toString();
            flag = 1;
        } else if (botaoCat2.isSelected()) {
            busca = boxCat2.getSelectedItem().toString();
            flag = 2;
        } else if (botaoCat3.isSelected()) {
            busca = boxCat3.getSelectedItem().toString();
            flag = 3;
        } else if (botaoCat4.isSelected()) {
            busca = boxCat4.getSelectedItem().toString();
            flag = 4;
        } else if (botaoCat5.isSelected()) {
            busca = boxCat5.getSelectedItem().toString();
            flag = 5;
        } else {
            popAviso("Por favor selecione uma das opções ao lado.");
            return;
        }

        Vector columnNames = new Vector();
        Vector data = new Vector();
        try {
            //realizar o carregamento do JDBC
            Class.forName("org.postgresql.Driver");
            //construindo a conexão com o SGBD PostgreSQL
            Connection conexao = DriverManager.getConnection(host, user, pass);
            switch (flag) {
                case 1:
                    input = "SELECT F.TITULO \"FILME\", I.GANHOU, E.PREMIO, E.ANO "
                            + "FROM INDICACAO_FILME I "
                            + "JOIN FILME F ON F.IDFILME = I.FILME "
                            + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                            + "WHERE UPPER(I.CAT_FILME) = UPPER('"
                            + busca
                            + "')ORDER BY - (I.EDICAO);";
                    break;
                case 2:
                    input = "SELECT P.NOME \"ATOR\", F.TITULO \"FILME\", I.GANHOU, E.PREMIO, E.ANO "
                            + "FROM INDICACAO_ATOR I "
                            + "JOIN FILME F ON F.IDFILME = I.FILME "
                            + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                            + "JOIN PESSOA P ON P.IDPESSOA = I.ATOR "
                            + "WHERE UPPER(I.CAT_ATOR) = UPPER('"
                            + busca
                            + "') ORDER BY - (I.EDICAO);";
                    break;
                case 3:
                    input = "SELECT F.TITULO \"FILME\", I.GANHOU, E.PREMIO, E.ANO "
                            + "FROM INDICACAO_MUSICA I "
                            + "JOIN FILME F ON F.IDFILME = I.FILME "
                            + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                            + "WHERE UPPER(I.CAT_MUSICA) = UPPER('"
                            + busca
                            + "') "
                            + "ORDER BY - (I.EDICAO);";
                    break;
                case 4:
                    input = "SELECT F.TITULO \"FILME\", I.GANHOU, E.PREMIO, E.ANO "
                            + "FROM INDICACAO_DIRETOR I "
                            + "JOIN FILME F ON F.IDFILME = I.FILME "
                            + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                            + "WHERE UPPER(I.CAT_DIR) = UPPER('"
                            + busca
                            + "') "
                            + "ORDER BY - (I.EDICAO);";

                    break;
                case 5:
                    input = "SELECT F.TITULO \"FILME\", I.GANHOU, E.PREMIO, E.ANO "
                            + "FROM INDICACAO_ROTEIRO I "
                            + "JOIN FILME F ON F.IDFILME = I.FILME "
                            + "JOIN EDICAO E ON E.IDEDICAO = I.EDICAO "
                            + "WHERE UPPER(I.CAT_ROT) = UPPER('"
                            + busca
                            + "') "
                            + "ORDER BY - (I.EDICAO);";
                    break;
                case -1:
                    return;
            }

            PreparedStatement instrucao = conexao.prepareStatement(input);

            result = instrucao.executeQuery(); //recebe os resultados da query
            ResultSetMetaData resultados = result.getMetaData(); //cria metadados dos resultados
            int colunas = resultados.getColumnCount(); //pega quantidade de colunas

            int count = 0;
            while (result.next()) {
                count++;
            }
            if (count == 0) {
                popAviso("Nenhum resultado encontrado.");
                return;
            }
            result = instrucao.executeQuery(); //recebe os resultados da query
            for (int i = 1; i <= colunas; i++) {
                columnNames.addElement(resultados.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }

            while (result.next()) {
                Vector row = new Vector(colunas);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas; i++) {
                    row.addElement(result.getObject(i));
                }
                data.addElement(row); //adiciona no vetor de dados as tuplas
            }
            result.close();       //encerra a consulta
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "ERRO CLASSE: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "ERRO SQL: " + e.getMessage());
        }
        //cria tabela e painel novo para exibir as consultas
        JTable table = new JTable(data, columnNames);
        table.setPreferredScrollableViewportSize(new Dimension(tamx, tamy));
        JScrollPane scrollPane = new JScrollPane(table);
        JPanel panel = new JPanel();
        panel.add(scrollPane);
        JButton botaoVoltar = new JButton("Voltar");
        botaoVoltar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFrame janela = new TelaBuscas(usuario);
                janela.setVisible(true);
                dispose();
            }
        });

        int tamaninho = scrollPane.getHeight();
        botaoVoltar.setLocation(250, tamaninho + 30);
        panel.add(botaoVoltar);
        panel.setSize(250, 1024);
        this.setContentPane(panel);
        this.pack();
        this.setVisible(true);
    }//GEN-LAST:event_botaoBuscas4ActionPerformed

    private void botaoBuscas5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscas5ActionPerformed
        String input1 = null, input2 = null, input3 = null, input4 = null, opt;
        int busca;
        if (campoBuscas5.getText().isEmpty()) {
            popAviso("Por favor, digite o ano.");
            return;
        } else {
            busca = parseInt(campoBuscas5.getText());
        }
        if (oscarBotao.isSelected()) {
            opt = "Oscar";
        } else if (globoBotao.isSelected()) {
            opt = "Globo de Ouro";
        } else {
            popAviso("Por favor, marque alguma das opções ao lado.");
            return;
        }
        input1 = "SELECT E.DIAMES \"DATA\", E.LOCAL, E.DIRECAO "
                + "FROM EDICAO E "
                + "WHERE UPPER(E.PREMIO) = UPPER('"
                + opt
                + "') "
                + "AND E.ANO = "
                + busca;
        input2 = "SELECT A.APRESENT \"APRESENTADORES\" "
                + "FROM APRESENTADORES A "
                + "JOIN EDICAO E ON E.IDEDICAO = A.EDICAO "
                + "WHERE UPPER(E.PREMIO) = UPPER('"
                + opt
                + "') AND E.ANO = "
                + busca;
        input3 = "SELECT ESP.ESPETACULO FROM ESPETACULOS ESP "
                + "JOIN EDICAO E ON E.IDEDICAO = ESP.EDICAO "
                + "WHERE UPPER(E.PREMIO) = UPPER('"
                + opt
                + "') "
                + "AND E.ANO = "
                + busca;
        input4 = "SELECT PART.NUMASSENTO \"No ASSENTO\", P.NOME "
                + "FROM PARTICIPACAO PART "
                + "JOIN EDICAO E ON E.IDEDICAO = PART.EDICAO "
                + "JOIN PESSOA P ON P.IDPESSOA = PART.PESSOA "
                + "WHERE UPPER(E.PREMIO) = UPPER('"
                + opt
                + "') "
                + "AND E.ANO = "
                + busca;

        Vector columnNames = new Vector();
        Vector columnNames2 = new Vector();
        Vector columnNames3 = new Vector();
        Vector columnNames4 = new Vector();
        Vector data = new Vector();
        Vector data2 = new Vector();
        Vector data3 = new Vector();
        Vector data4 = new Vector();
        try {
            //realizar o carregamento do JDBC
            Class.forName("org.postgresql.Driver");
            //construindo a conexão com o SGBD PostgreSQL
            Connection conexao = DriverManager.getConnection(host, user, pass);

            PreparedStatement instrucao = conexao.prepareStatement(input1);
            PreparedStatement instrucao2 = conexao.prepareStatement(input2);
            PreparedStatement instrucao3 = conexao.prepareStatement(input3);
            PreparedStatement instrucao4 = conexao.prepareStatement(input4);

            ResultSet result = instrucao.executeQuery(); //recebe os resultados da query
            ResultSet result2 = instrucao2.executeQuery(); //recebe os resultados da query
            ResultSet result3 = instrucao3.executeQuery(); //recebe os resultados da query
            ResultSet result4 = instrucao4.executeQuery(); //recebe os resultados da query
            ResultSetMetaData resultados = result.getMetaData(); //cria metadados dos resultados
            ResultSetMetaData resultados2 = result2.getMetaData(); //cria metadados dos resultados
            ResultSetMetaData resultados3 = result3.getMetaData(); //cria metadados dos resultados
            ResultSetMetaData resultados4 = result4.getMetaData(); //cria metadados dos resultados
            int colunas = resultados.getColumnCount(); //pega quantidade de colunas
            int colunas2 = resultados2.getColumnCount(); //pega quantidade de colunas
            int colunas3 = resultados3.getColumnCount(); //pega quantidade de colunas
            int colunas4 = resultados4.getColumnCount(); //pega quantidade de colunas

            int count = 0;
            while (result.next()) {
                count++;
            }
            if (count == 0) {
                popAviso("Nenhum resultado encontrado.");
                return;
            }

            for (int i = 1; i <= colunas; i++) {
                columnNames.addElement(resultados.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            for (int i = 1; i <= colunas2; i++) {
                columnNames2.addElement(resultados2.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            for (int i = 1; i <= colunas3; i++) {
                columnNames3.addElement(resultados3.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            for (int i = 1; i <= colunas4; i++) {
                columnNames4.addElement(resultados4.getColumnName(i)); //adiciona os nomes das colunas ao vetor de nomes
            }
            result = instrucao.executeQuery();
            while (result.next()) {
                Vector row = new Vector(colunas);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas; i++) {
                    row.addElement(result.getObject(i));
                }
                data.addElement(row); //adiciona no vetor de dados as tuplas
            }
            while (result2.next()) {
                Vector row = new Vector(colunas2);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas2; i++) {
                    row.addElement(result2.getObject(i));
                }
                data2.addElement(row); //adiciona no vetor de dados as tuplas
            }
            while (result3.next()) {
                Vector row = new Vector(colunas3);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas3; i++) {
                    row.addElement(result3.getObject(i));
                }
                data3.addElement(row); //adiciona no vetor de dados as tuplas
            }
            
            while (result4.next()) {
                Vector row = new Vector(colunas4);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas4; i++) {
                    row.addElement(result4.getObject(i));
                }
                data4.addElement(row); //adiciona no vetor de dados as tuplas
            }
            result.close();       //encerra a consulta
            result2.close();       //encerra a consulta
            result3.close();       //encerra a consulta
            result4.close();       //encerra a consulta
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "ERRO CLASSE: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "ERRO SQL: " + e.getMessage());
        }
        //cria tabela e painel novo para exibir as consultas
        JTable table = new JTable(data, columnNames);
        JTable table2 = new JTable(data2, columnNames2);
        JTable table3 = new JTable(data3, columnNames3);
        JTable table4 = new JTable(data4, columnNames4);
        table.setPreferredScrollableViewportSize(new Dimension(tamx/2, tamy));
        table2.setPreferredScrollableViewportSize(new Dimension(tamx/4, tamy));
        table3.setPreferredScrollableViewportSize(new Dimension(tamx/4, tamy));
        table4.setPreferredScrollableViewportSize(new Dimension(tamx/2, tamy));
        JScrollPane scrollPane = new JScrollPane(table);
        JScrollPane scrollPane2 = new JScrollPane(table2);
        JScrollPane scrollPane3 = new JScrollPane(table3);
        JScrollPane scrollPane4 = new JScrollPane(table4);
        JPanel panel = new JPanel();
        panel.add(scrollPane);
        panel.add(scrollPane2);
        panel.add(scrollPane3);
        panel.add(scrollPane4);
        JButton botaoVoltar = new JButton("Voltar");
        botaoVoltar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFrame janela = new TelaBuscas(usuario);
                janela.setVisible(true);
                dispose();
            }
        });
        int tamaninho = scrollPane.getHeight();
        botaoVoltar.setLocation(250, tamaninho + 30);
        panel.add(botaoVoltar);
        this.setContentPane(panel);
        this.pack();
        this.setVisible(true);
    }//GEN-LAST:event_botaoBuscas5ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton atorBotao;
    private javax.swing.JButton botaoBuscas1;
    private javax.swing.JButton botaoBuscas2;
    private javax.swing.JButton botaoBuscas3;
    private javax.swing.JButton botaoBuscas4;
    private javax.swing.JButton botaoBuscas5;
    private javax.swing.JRadioButton botaoCat1;
    private javax.swing.JRadioButton botaoCat2;
    private javax.swing.JRadioButton botaoCat3;
    private javax.swing.JRadioButton botaoCat4;
    private javax.swing.JRadioButton botaoCat5;
    private javax.swing.JButton botaoVoltar;
    private javax.swing.JComboBox boxCat1;
    private javax.swing.JComboBox boxCat2;
    private javax.swing.JComboBox boxCat3;
    private javax.swing.JComboBox boxCat4;
    private javax.swing.JComboBox boxCat5;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField campoBuscas1;
    private javax.swing.JTextField campoBuscas2;
    private javax.swing.JTextField campoBuscas3;
    private javax.swing.JTextField campoBuscas5;
    private javax.swing.JRadioButton diretorBotao;
    private javax.swing.JRadioButton globoBotao;
    private javax.swing.ButtonGroup grupoBuscas1;
    private javax.swing.ButtonGroup grupoBuscas2;
    private javax.swing.ButtonGroup grupoExibicao1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JRadioButton oscarBotao;
    private javax.persistence.EntityManager postgresPUEntityManager;
    private javax.swing.JRadioButton roteiristaBotao;
    // End of variables declaration//GEN-END:variables
}
