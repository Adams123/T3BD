
package oracleconnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JOptionPane;

public final class inserirHistorico extends javax.swing.JFrame
{

    static Connection con;

    public inserirHistorico(Connection con)
    {
        inserirHistorico.con = con;
        initComponents();
    }

    public void setComboboxes(Connection con)
    {
        String input1 = "SELECT U.CPF FROM USUARIO U";
        String input2 = "SELECT P.CODPLANO FROM PLANO P";
        String input3 = "SELECT to_char(P.DATA,'DD/MM/YY'), P.FORMA FROM PAGAMENTO P";

        Vector data1 = new Vector();
        Vector data2 = new Vector();
        Vector data3 = new Vector();

        try
        {

            PreparedStatement instrucao1 = con.prepareStatement(input1);
            PreparedStatement instrucao2 = con.prepareStatement(input2);
            PreparedStatement instrucao3 = con.prepareStatement(input3);
            //construção da classe PreparedStatement para passagem de parâmetros

            ResultSet result1 = instrucao1.executeQuery(); //recebe os resultados da query
            ResultSet result2 = instrucao2.executeQuery(); //recebe os resultados da query
            ResultSet result3 = instrucao3.executeQuery(); //recebe os resultados da query

            ResultSetMetaData resultados1 = result1.getMetaData(); //cria metadados dos resultados
            ResultSetMetaData resultados2 = result2.getMetaData(); //cria metadados dos resultados
            ResultSetMetaData resultados3 = result3.getMetaData(); //cria metadados dos resultados

            int colunas1 = resultados1.getColumnCount(); //pega quantidade de colunas
            int colunas2 = resultados2.getColumnCount(); //pega quantidade de colunas
            int colunas3 = resultados3.getColumnCount(); //pega quantidade de colunas

            int count = 0;
            while (result1.next() || result2.next() || result3.next())
            {
                count++;
            }
            if (count == 0)
            {
                System.out.println("Nenhum resultado encontrado");
                return;
            }
            result1 = instrucao1.executeQuery();//reposiciona ponteiro de leitura dos resultados
            result2 = instrucao2.executeQuery();//reposiciona ponteiro de leitura dos resultados
            result3 = instrucao3.executeQuery();//reposiciona ponteiro de leitura dos resultados
            while (result1.next())
            {
                Vector row = new Vector(colunas1);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas1; i++)
                {
                    row.addElement(result1.getObject(i));
                }
                data1.addElement(row); //adiciona no vetor de dados as tuplas
            }
            while (result2.next())
            {
                Vector row = new Vector(colunas2);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas2; i++)
                {
                    row.addElement(result2.getObject(i));
                }
                data2.addElement(row); //adiciona no vetor de dados as tuplas
            }
            while (result3.next())
            {
                Vector row = new Vector(colunas3);     //cria as tuplas com os dados para exibicao
                for (int i = 1; i <= colunas3; i++)
                {
                    row.addElement(result3.getObject(i));
                }
                data3.addElement(row);
            }

            result1.close();       //encerra a consulta
            result2.close();
            result3.close();

        } catch (SQLException e)
        {
            JOptionPane.showMessageDialog(null, "ERRO SQL: " + e.getMessage());
        }
        //adicionando os itens às combo boxes
        for (int i = 0; i < data1.capacity(); i++)
        {
            jcUsuario.addItem(data1.elementAt(i).toString());
        }

        for (int i = 0; i < data2.capacity(); i++)
        {
            jcPlano.addItem(data2.elementAt(i).toString());
        }
        for (int i = 0; i < data3.capacity(); i++)
        {
            jcData.addItem(data3.get(i).toString());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jlUsuario = new javax.swing.JLabel();
        jlPlano = new javax.swing.JLabel();
        jlData = new javax.swing.JLabel();
        jcUsuario = new javax.swing.JComboBox();
        jcPlano = new javax.swing.JComboBox();
        jcData = new javax.swing.JComboBox();
        jbInserir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jlUsuario.setText("Usuário");

        jlPlano.setText("Plano");

        jlData.setText("Data, Forma");

        jcUsuario.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jcUsuarioActionPerformed(evt);
            }
        });

        jbInserir.setText("Inserir");
        jbInserir.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbInserirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jlData)
                                .addComponent(jlPlano)
                                .addComponent(jlUsuario))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jbInserir))
                                .addComponent(jcData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jcPlano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jcUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(131, 131, 131))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[]
        {
            jcData, jcPlano, jcUsuario
        });

        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jlUsuario)
                                .addComponent(jcUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jlPlano)
                                .addComponent(jcPlano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jlData)
                                .addComponent(jcData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbInserir)
                        .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbInserirActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_jbInserirActionPerformed
        String user = jcUsuario.getSelectedItem().toString().replaceAll("[^a-zA-Z0-9]", "");
        String plano = jcPlano.getSelectedItem().toString().replaceAll("[^a-zA-Z0-9]", "");
        Long inputUsuario = Long.parseLong(user);
        Long inputPlano = Long.parseLong(plano);
        String[] inputData = jcData.getSelectedItem().toString().toUpperCase().split(",");

        inputData[0] = inputData[0].replace("[", "");
        inputData[0] = inputData[0].replace(" ", "");
        inputData[1] = inputData[1].replaceAll("[^a-zA-Z0-9]", "");
        String query = "INSERT INTO HISTORICODEPAGAMENTO VALUES ("
                + inputUsuario + ","
                + inputPlano + ",'"
                + inputData[0] + "','"
                + inputData[1] + "')";
        Statement instrucao;
        try
        {
            instrucao = con.createStatement();
            instrucao.executeUpdate(query);

        } catch (SQLException e)
        {
            JOptionPane.showMessageDialog(null, "ERRO SQL: " + e.getMessage());
        }

    }//GEN-LAST:event_jbInserirActionPerformed

    private void jcUsuarioActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_jcUsuarioActionPerformed

    }//GEN-LAST:event_jcUsuarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(inserirHistorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(inserirHistorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(inserirHistorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(inserirHistorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new inserirHistorico(con).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbInserir;
    private javax.swing.JComboBox jcData;
    private javax.swing.JComboBox jcPlano;
    private javax.swing.JComboBox jcUsuario;
    private javax.swing.JLabel jlData;
    private javax.swing.JLabel jlPlano;
    private javax.swing.JLabel jlUsuario;
    // End of variables declaration//GEN-END:variables
}
